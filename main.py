# San Juan Online Bot ‚Äî fixed

import os
import logging
import asyncio
import re
from datetime import datetime, timedelta, timezone
from collections import defaultdict

from telegram import Update, ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, Defaults, AIORateLimiter,
    CallbackQueryHandler
)

# --- –õ–æ–≥–∏ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# --- ENV ---
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID", "0"))  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# --- –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ ---
ALLOWED_LINKS = [
    "@sanjuanonlinebot",
    "https://t.me/+pn6lcd0fv5w1ndk8",
    "https://t.me/sanjuan_online"
]
ALLOWED_LINKS = [link.lower() for link in ALLOWED_LINKS]

# --- –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–æ–∫ (ID –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤) ---
ALLOWED_FORWARD_CHATS = set()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: { -1001234567890 }

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ---
user_warnings = defaultdict(int)
reply_context = {}  # admin_id -> target_user_id

print("‚úÖ BOT ACTIVADO ‚Äì NUEVA VERSI√ìN (fix reply, rules inline, forward check)")

# --- Helpers ---
def is_allowed_link(text: str) -> bool:
    text_lower = text.lower()
    for allowed in ALLOWED_LINKS:
        if allowed in text_lower:
            return True
    return False

EMOJI_RE = r'[\U0001F300-\U0001F6FF\U0001F900-\U0001FAFF\U00002600-\U000026FF\U00002700-\U000027BF]'

async def safe_delete(msg):
    try:
        await msg.delete()
    except Exception as e:
        logger.debug(f"Delete skipped: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ¬°Hola! Mand√° tu mensaje al admin o pregunt√° dudas. ¬°Gracias!")

async def reglas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìú <b>Reglas del grupo</b>\n"
        "‚Ä¢ No spam, No porno, No drogas.\n"
        "‚Ä¢ Sin links ni menciones a otros grupos/canales.\n"
        "‚Ä¢ Respeto siempre.\n"
        "‚Ä¢ Reenv√≠os de canales ajenos: prohibidos.\n"
        "‚Ä¢ Exceso de emojis: mute.\n"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>üõü Ayuda del Bot</b>\n\n"
        "üëâ <b>/start</b> ‚Äì Iniciar charla con el bot.\n"
        "üìú <b>/reglas</b> ‚Äì Reglas del grupo.\n"
        "üö® <b>/help</b> ‚Äì Este mensaje.\n\n"
        "üî∏ Prohibido publicar enlaces, menciones o spam.\n"
        "üî∏ Para hablar con el admin, escrib√≠ ac√° al bot.\n"
        "<i>¬°Gracias por mantener la comunidad limpia!</i>"
    )

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏, –ø—Ä–∞–≤–∏–ª–∞ —Å—Ä–∞–∑—É) ---
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for user in update.message.new_chat_members:
        text = (
            f"üëã ¬°Bienvenidx {user.first_name} a <b>San Juan Online üá¶üá∑</b>!\n\n"
            "üìú <b>Reglas r√°pidas:</b>\n"
            "‚Ä¢ No spam, No porno, No drogas.\n"
            "‚Ä¢ Sin links ni menciones a otros grupos/canales.\n"
            "‚Ä¢ Reenv√≠os de canales ajenos: prohibidos.\n"
            "‚Ä¢ Exceso de emojis: mute.\n\n"
            "Si ten√©s dudas ‚Äî escrib√≠ al bot. ¬°Disfrut√°!"
        )
        msg = await update.message.reply_text(text)
        await asyncio.sleep(60)
        await safe_delete(msg)

# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –º—É—Ç ---
async def moderate_and_mute(update, context, user, chat_id, reason="infracci√≥n de reglas"):
    user_id = user.id
    try:
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"[Delete error] {e}")

        user_warnings[user_id] += 1
        logger.info(f"Warn {user_id} ({user.username}): {user_warnings[user_id]} due to {reason}")

        if user_warnings[user_id] == 1:
            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ö†Ô∏è @{user.username or user.first_name}, tu mensaje fue eliminado por {reason}. Pr√≥xima vez = mute 24h."
            )
            await asyncio.sleep(15)
            await safe_delete(msg)
        elif user_warnings[user_id] >= 2:
            until = datetime.now(timezone.utc) + timedelta(hours=24)
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=until
            )
            msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üö´ @{user.username or user.first_name} fue silenciado por 24 horas debido a {reason} repetido."
            )
            await asyncio.sleep(15)
            await safe_delete(msg)
    except Exception as e:
        logger.warning(f"[Moderation error] {e}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ ---
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º GROUP_ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if GROUP_ID and update.message.chat.id != GROUP_ID:
        return

    user = update.message.from_user
    chat_id = update.message.chat.id
    text = (update.message.text or update.message.caption or "")

    # –ê–¥–º–∏–Ω–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    chat_member = await context.bot.get_chat_member(chat_id, user.id)
    if chat_member.status in ['administrator', 'creator']:
        return

    # 1) –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    is_fwd = bool(
        (hasattr(update.message, "is_automatic_forward") and update.message.is_automatic_forward)
        or update.message.forward_from
        or update.message.forward_from_chat
    )
    if is_fwd:
        # –†–∞–∑—Ä–µ—à–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ whitelisted –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_ok = False
        if update.message.forward_from_chat:
            src_id = update.message.forward_from_chat.id
            if src_id in ALLOWED_FORWARD_CHATS:
                source_ok = True
        if not source_ok:
            await moderate_and_mute(update, context, user, chat_id, "reenviar mensajes (no permitido)")
            return

    # 2) –°—Å—ã–ª–∫–∏/—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    text_lower = text.lower()

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º e-mail, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –∏—Ö –∫–∞–∫ @mention
    text_sanitized = re.sub(r'\S+@\S+\.\S+', '', text_lower)

    link_patterns = [
        r'https?://', r't\.me/', r'telegram\.me/', r't\[\.\]me', r'telegram\[\.\]me',
        r'(?<!\S)@\w{3,}'
    ]
    for pattern in link_patterns:
        if re.search(pattern, text_sanitized):
            if not is_allowed_link(text_sanitized):
                await moderate_and_mute(update, context, user, chat_id, "publicar enlaces o menciones no permitidos")
                return

    # 3) –≠–º–æ–¥–∑–∏ –ª–∏–º–∏—Ç
    emoji_count = len(re.findall(EMOJI_RE, text))
    if emoji_count > 10:
        await moderate_and_mute(update, context, user, chat_id, "exceso de emojis")
        return

# --- –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Üí –∞–¥–º–∏–Ω—É ---
async def inbox_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–° –æ—Ç –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π Responder."""
    user = update.message.from_user
    if user.id == ADMIN_ID:
        return  # —ç—Ç–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º –∞–¥–º–∏–Ω–∞ –Ω–µ –ª–æ–≤–∏–º

    user_link = f"tg://user?id={user.id}"
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üì® Responder", callback_data=f"responder_{user.id}")]]
    )
    text = update.message.text or "(sin texto)"
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"üì¢ <b>De:</b> @{user.username or user.first_name}\n\n{text}\n\n{user_link}",
        reply_markup=kb
    )
    await update.message.reply_text("‚úÖ Mensaje enviado al admin.")

# --- –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞—Ç—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´Responder¬ª ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("responder_"):
        target_id = int(query.data.split("_", 1)[1])
        reply_context[ADMIN_ID] = target_id
        await query.message.reply_text(
            f"‚úçÔ∏è Escrib√≠ tu respuesta. Se enviar√° a <a href='tg://user?id={target_id}'>este usuario</a>."
        )

# --- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ —Å –æ—Ç–≤–µ—Ç–æ–º ---
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    target_id = reply_context.get(ADMIN_ID)
    if not target_id:
        await update.message.reply_text("‚ö†Ô∏è No hay destinatario seleccionado. Toc√° ¬´Responder¬ª debajo del mensaje.")
        return
    text = update.message.text or ""
    if not text.strip():
        await update.message.reply_text("‚ö†Ô∏è Mensaje vac√≠o.")
        return

    await context.bot.send_message(chat_id=target_id, text=f"üì¨ <b>Mensaje del admin</b>:\n\n{text}")
    await update.message.reply_text("‚úÖ Enviado.")

# --- main ---
def main():
    defaults = Defaults(parse_mode="HTML", disable_web_page_preview=True)
    app = Application.builder().token(TOKEN).defaults(defaults).rate_limiter(AIORateLimiter()).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reglas", reglas))
    app.add_handler(CommandHandler("help", help_command))

    # –°–µ—Ä–≤–∏—Å: –≤—Ö–æ–¥ –≤ –≥—Ä—É–ø–ø—É
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

    # Callback: –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–º
    app.add_handler(CallbackQueryHandler(handle_callback))

    # –ü—Ä–∏–≤–∞—Ç–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–≤–∏–º –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.USER(ADMIN_ID), admin_reply))

    # –ü—Ä–∏–≤–∞—Ç–∫–∞: –≤—Ö–æ–¥—è—â–∞—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Üí –∞–¥–º–∏–Ω—É
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.USER(ADMIN_ID), inbox_to_admin))

    # –ì—Ä—É–ø–ø–∞: –≤—Å–µ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.TEXT & ~filters.COMMAND, handle_messages))

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
