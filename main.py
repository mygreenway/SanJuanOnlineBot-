import os
import logging
from datetime import datetime
from collections import defaultdict

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, Defaults
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

# –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Å–ª–æ–≤–∞
FORBIDDEN_LINKS = ["http", "https", "t.me/", "bit.ly"]
FORBIDDEN_WORDS = []

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
user_activity = defaultdict(int)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Ñ–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞
async def handle_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    text = update.message.text.lower()
    user_id = update.message.from_user.id
    user_activity[user_id] += 1

    if any(word in text for word in FORBIDDEN_LINKS + FORBIDDEN_WORDS):
        await update.message.delete()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for user in update.message.new_chat_members:
        await update.message.reply_text(
            f"üëã ¬°Bienvenidx {user.first_name} a <b>San Juan Online üá¶üá∑</b>! Ac√° compartimos buena onda y respeto ü§ù"
        )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üìú Reglas", "üí¨ Escribile al admin"], ["ü§ñ Sobre el bot"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "¬°Hola! Soy el bot oficial de <b>San Juan Online üá¶üá∑</b> ü§ñ\n¬øEn qu√© te puedo dar una mano?",
        reply_markup=markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /report
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõ°Ô∏è Gracias por avisar. El equipo va a revisarlo üëÄ")

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def send_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_users = sorted(user_activity.items(), key=lambda x: x[1], reverse=True)[:5]
    if not top_users:
        await update.message.reply_text("Todav√≠a no hay actividad registrada.")
        return

    response = "üìä Lxs m√°s charlatanes del grupo:\n"
    for user_id, count in top_users:
        try:
            user = await context.bot.get_chat_member(GROUP_ID, user_id)
            response += f"‚Ä¢ {user.user.first_name}: {count} mensajes\n"
        except:
            continue
    await update.message.reply_text(response)

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ—Å—Ç
async def daily_post(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=GROUP_ID,
        text="‚òÄÔ∏è ¬°Buen d√≠a a todes! ¬øQu√© pens√°s del tema de hoy?\n#CharlitaDelD√≠a"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    print("‚úÖ Bot is starting...")

    defaults = Defaults(parse_mode="HTML")
    app = Application.builder().token(TOKEN).defaults(defaults).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("stats", send_stats))

    # –°–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_messages))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))

    # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    app.job_queue.run_daily(daily_post, time=datetime.strptime("09:00", "%H:%M").time())

    # –ó–∞–ø—É—Å–∫
    app.run_polling()

if __name__ == "__main__":
    main()
